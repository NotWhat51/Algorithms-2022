@file:Suppress("UNUSED_PARAMETER")

package lesson2

import java.lang.Math.sqrt

/**
 * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
 * Простая
 *
 * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
 * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
 *
 * 201
 * 196
 * 190
 * 198
 * 187
 * 194
 * 193
 * 185
 *
 * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
 * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
 * Вернуть пару из двух моментов.
 * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
 * Например, для приведённого выше файла результат должен быть Pair(3, 4)
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun optimizeBuyAndSell(inputName: String): Pair<Int, Int> {
    TODO()
}

/**
 * Задача Иосифа Флафия.
 * Простая
 *
 * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
 *
 * 1 2 3
 * 8   4
 * 7 6 5
 *
 * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
 * Человек, на котором остановился счёт, выбывает.
 *
 * 1 2 3
 * 8   4
 * 7 6 х
 *
 * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
 * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
 *
 * 1 х 3
 * 8   4
 * 7 6 Х
 *
 * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
 *
 * 1 Х 3
 * х   4
 * 7 6 Х
 *
 * 1 Х 3
 * Х   4
 * х 6 Х
 *
 * х Х 3
 * Х   4
 * Х 6 Х
 *
 * Х Х 3
 * Х   х
 * Х 6 Х
 *
 * Х Х 3
 * Х   Х
 * Х х Х
 *
 * Общий комментарий: решение из Википедии для этой задачи принимается,
 * но приветствуется попытка решить её самостоятельно.
 */
fun josephTask(menNumber: Int, choiceInterval: Int): Int {
    TODO()
}

/**
 * Наибольшая общая подстрока.
 * Средняя
 *
 * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
 * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
 * Если общих подстрок нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 * Если имеется несколько самых длинных общих подстрок одной длины,
 * вернуть ту из них, которая встречается раньше в строке first.
 *
 * R = O(m * n)
 * T = O(m * n)
 */

// |  консерваторы
// |0 000000000000
//о|0| 1       1
//б|0|
//с|0|   1
//е|0|    2
//р|0|     3    1
//в|0|      4
//а|0|       5
//т|0|        6
//о|0| 1       7
//р|0|     1    8
//и|0|
//я|0|

// алгоритм взят из лекции

//Считаю тесты создателей проекта достаточными
//запихать в них отрывок из РУслана и Людмилы было забавно
//Впринципе в таком ключе можно впихнуть отрывок из любой худ литературы, например 451 по Фаренгейту

fun longestCommonSubstring(first: String, second: String): String {
    val m = first.length + 1
    val n = second.length + 1
    var sizeSubstring = 0
    var placeLastSymbol = 0
    val table = Array(m) { Array<Int>(n) { 0 } }
    var result = ""

    for (i in 1 until m)
        for (j in 1 until n) {
            if (first[i - 1] == second[j - 1])
                table[i][j] = table[i - 1][j - 1] + 1
            if (sizeSubstring < table[i][j]) {
                sizeSubstring = table[i][j]
                placeLastSymbol = i
            }
        }
    val placeFirstSymbol = placeLastSymbol - sizeSubstring
    if (sizeSubstring != 0)
        result = first.substring(placeFirstSymbol, placeLastSymbol)

    return result
}

/**
 * Число простых чисел в интервале
 * Простая
 *
 * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
 * Если limit <= 1, вернуть результат 0.
 *
 * Справка: простым считается число, которое делится нацело только на 1 и на себя.
 * Единица простым числом не считается.
 *
 * R = O(n)
 * T = O(n * log(log(n)))
 */

// решение взято с статьи википедиа "Решето Эратосфена"

//тесты достаточнее некуда

fun calcPrimesNumber(limit: Int): Int {
    if (limit <= 1) return 0
    val sieve = BooleanArray(limit + 1) { true }
    var result = 0
    for (i in 2..limit) {
        if (sieve[i]) {
            for (j in i * 2..limit step i)
                sieve[j] = false
            result++
        }
    }
    return result
}
